# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr

class TransactionResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    amount: StrictInt = Field(..., description="The amount of the transaction.")
    charge: StrictStr = Field(..., description="Randomly assigned unique order identifier associated with the charge.")
    created_at: StrictInt = Field(..., description="Date and time of creation of the transaction in Unix format.")
    currency: constr(strict=True, max_length=3) = Field(..., description="The currency of the transaction. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)")
    fee: StrictInt = Field(..., description="The amount to be deducted for taxes and commissions.")
    id: StrictStr = Field(..., description="Unique identifier of the transaction.")
    livemode: StrictBool = Field(..., description="Indicates whether the transaction was created in live mode or test mode.")
    net: StrictInt = Field(..., description="The net amount after deducting commissions and taxes.")
    object: StrictStr = Field(..., description="Object name, which is transaction.")
    status: StrictStr = Field(..., description="Code indicating transaction status.")
    type: StrictStr = Field(..., description="Transaction Type")
    __properties = ["amount", "charge", "created_at", "currency", "fee", "id", "livemode", "net", "object", "status", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransactionResponse:
        """Create an instance of TransactionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransactionResponse:
        """Create an instance of TransactionResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TransactionResponse.parse_obj(obj)

        _obj = TransactionResponse.parse_obj({
            "amount": obj.get("amount"),
            "charge": obj.get("charge"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "fee": obj.get("fee"),
            "id": obj.get("id"),
            "livemode": obj.get("livemode"),
            "net": obj.get("net"),
            "object": obj.get("object"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj

