# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class CompanyPayoutDestinationResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    object: Optional[StrictStr] = Field(None, description="The resource's type")
    currency: Optional[StrictStr] = Field(None, description="currency of the receiving account")
    account_holder_name: Optional[StrictStr] = Field(None, description="Name of the account holder")
    bank: Optional[StrictStr] = Field(None, description="Name of the bank")
    type: Optional[StrictStr] = Field(None, description="Type of the payout destination")
    account_number: Optional[StrictStr] = Field(None, description="Account number of the receiving account")
    __properties = ["object", "currency", "account_holder_name", "bank", "type", "account_number"]

    @validator('object')
    def object_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('payout_destination'):
            raise ValueError("must validate the enum values ('payout_destination')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('bank_account'):
            raise ValueError("must validate the enum values ('bank_account')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompanyPayoutDestinationResponse:
        """Create an instance of CompanyPayoutDestinationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompanyPayoutDestinationResponse:
        """Create an instance of CompanyPayoutDestinationResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CompanyPayoutDestinationResponse.parse_obj(obj)

        _obj = CompanyPayoutDestinationResponse.parse_obj({
            "object": obj.get("object"),
            "currency": obj.get("currency"),
            "account_holder_name": obj.get("account_holder_name"),
            "bank": obj.get("bank"),
            "type": obj.get("type"),
            "account_number": obj.get("account_number")
        })
        return _obj

