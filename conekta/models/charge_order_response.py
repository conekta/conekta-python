# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from conekta.models.charge_order_response_payment_method import ChargeOrderResponsePaymentMethod
from conekta.models.charge_response_channel import ChargeResponseChannel

class ChargeOrderResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    amount: Optional[StrictInt] = None
    channel: Optional[ChargeResponseChannel] = None
    created_at: Optional[StrictInt] = None
    currency: Optional[StrictStr] = None
    customer_id: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    device_fingerprint: Optional[StrictStr] = None
    failure_code: Optional[StrictStr] = None
    failure_message: Optional[StrictStr] = None
    fee: Optional[StrictInt] = None
    id: Optional[StrictStr] = None
    livemode: Optional[StrictBool] = None
    monthly_installments: Optional[StrictInt] = None
    object: Optional[StrictStr] = None
    order_id: Optional[StrictStr] = None
    paid_at: Optional[StrictInt] = None
    payment_method: Optional[ChargeOrderResponsePaymentMethod] = None
    reference_id: Optional[StrictStr] = Field(None, description="Reference ID of the charge")
    refunds: Optional[List[Dict[str, Any]]] = None
    status: Optional[StrictStr] = None
    __properties = ["amount", "channel", "created_at", "currency", "customer_id", "description", "device_fingerprint", "failure_code", "failure_message", "fee", "id", "livemode", "monthly_installments", "object", "order_id", "paid_at", "payment_method", "reference_id", "refunds", "status"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChargeOrderResponse:
        """Create an instance of ChargeOrderResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['payment_method'] = self.payment_method.to_dict()
        # set to None if device_fingerprint (nullable) is None
        if self.device_fingerprint is None:
            _dict['device_fingerprint'] = None

        # set to None if monthly_installments (nullable) is None
        if self.monthly_installments is None:
            _dict['monthly_installments'] = None

        # set to None if paid_at (nullable) is None
        if self.paid_at is None:
            _dict['paid_at'] = None

        # set to None if reference_id (nullable) is None
        if self.reference_id is None:
            _dict['reference_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChargeOrderResponse:
        """Create an instance of ChargeOrderResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ChargeOrderResponse.parse_obj(obj)

        _obj = ChargeOrderResponse.parse_obj({
            "amount": obj.get("amount"),
            "channel": ChargeResponseChannel.from_dict(obj.get("channel")) if obj.get("channel") is not None else None,
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "customer_id": obj.get("customer_id"),
            "description": obj.get("description"),
            "device_fingerprint": obj.get("device_fingerprint"),
            "failure_code": obj.get("failure_code"),
            "failure_message": obj.get("failure_message"),
            "fee": obj.get("fee"),
            "id": obj.get("id"),
            "livemode": obj.get("livemode"),
            "monthly_installments": obj.get("monthly_installments"),
            "object": obj.get("object"),
            "order_id": obj.get("order_id"),
            "paid_at": obj.get("paid_at"),
            "payment_method": ChargeOrderResponsePaymentMethod.from_dict(obj.get("payment_method")) if obj.get("payment_method") is not None else None,
            "reference_id": obj.get("reference_id"),
            "refunds": obj.get("refunds"),
            "status": obj.get("status")
        })
        return _obj

