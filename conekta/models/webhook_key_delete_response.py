# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class WebhookKeyDeleteResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    active: Optional[StrictBool] = Field(None, description="Indicates if the webhook key is active")
    created_at: Optional[StrictInt] = Field(None, description="Unix timestamp in seconds with the creation date of the webhook key")
    deleted: Optional[StrictBool] = Field(None, description="Indicates if the webhook key is deleted")
    id: Optional[StrictStr] = Field(None, description="Unique identifier of the webhook key")
    livemode: Optional[StrictBool] = Field(None, description="Indicates if the webhook key is in live mode")
    object: Optional[StrictStr] = Field(None, description="Object name, value is webhook_key")
    __properties = ["active", "created_at", "deleted", "id", "livemode", "object"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebhookKeyDeleteResponse:
        """Create an instance of WebhookKeyDeleteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebhookKeyDeleteResponse:
        """Create an instance of WebhookKeyDeleteResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WebhookKeyDeleteResponse.parse_obj(obj)

        _obj = WebhookKeyDeleteResponse.parse_obj({
            "active": obj.get("active"),
            "created_at": obj.get("created_at"),
            "deleted": obj.get("deleted"),
            "id": obj.get("id"),
            "livemode": obj.get("livemode"),
            "object": obj.get("object")
        })
        return _obj

